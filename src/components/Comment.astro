---
import CommentList from "./CommentList.astro";
import VoteArrows from "./VoteArrows.astro";
import MaybeCommentLink from "./MaybeCommentLink.astro";
import CommentReply from "./CommentReply.astro";
import type { Comment, CommentVote } from "@prisma/client";
import type { User } from "lucia";

export interface CommentWithComments extends Comment {
  children: CommentWithComments[];
  commentVotes: CommentVote[];
  user: User;
}

interface Props {
  postId: number;
  comment: CommentWithComments;
  depth: number;
  newId: number;
  nextCommentId?: number;
  prevCommentId?: number;
  parentCommentId?: number;
  rootCommentId?: number;
  hiddenCommentIds: number[];
}

const {
  postId,
  comment,
  newId,
  prevCommentId,
  nextCommentId,
  parentCommentId,
  depth,
  hiddenCommentIds,
} = Astro.props;
const { user } = Astro.locals;

const commentVote = comment.commentVotes?.find(
  (commentVote) => commentVote.userId === user?.id
);
const currentUserVote = commentVote?.vote;

function getDateString(date: Date) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
  };

  return date.toLocaleDateString("en-US", options);
}

function getChildCommentCount(comment: CommentWithComments) {
  return (
    comment.childrenCount +
    comment.children?.reduce(
      (acc, child) => acc + getChildCommentCount(child),
      0
    )
  );
}

const recursiveChildCount = getChildCommentCount(comment);
const isShown = !hiddenCommentIds?.includes(comment.id);
const isNew = newId === comment.id;
---

<div
  id={`comment-${comment.id}`}
  x-data={`{isShown: ${isShown}, recursiveChildCount: ${recursiveChildCount}, isNew: ${isNew}}`}
  x-bind:class="{'animate-pulse': isNew}"
  x-init={`
      () => {
        $dispatch('comment-added', { id: ${comment.id} });
        if (${isNew}) {
          $el.scrollIntoView();
          setTimeout(() => isNew = false, 5000) 
        }
      };
    `}
>
  <table>
    <tbody>
      <td>
        <span>
          <VoteArrows
            url={`/api/comments/${comment.id}/vote/`}
            entityId={comment.id}
            currentUserVote={currentUserVote}
            user={user}
          />
        </span>
      </td>
      <td class="text-xs">
        <span id={`comment-vote-count-${comment.id}`}>{comment.voteCount}</span>
        {comment.user?.name}
        {getDateString(comment.createdAt)}
        |
        <MaybeCommentLink targetId={parentCommentId}>parent</MaybeCommentLink>
        <MaybeCommentLink targetId={prevCommentId}>prev</MaybeCommentLink>
        <MaybeCommentLink targetId={nextCommentId}>next</MaybeCommentLink>
        <span
          class="link"
          x-on:click={`
            isShown = !isShown; 
            isShown 
            ? $dispatch('comment-show', {id: ${comment.id}})
            : $dispatch('comment-hide', {id: ${comment.id}});
          `}
          x-text="isShown ? '[-]' : `${recursiveChildCount + 1} more`"></span>
      </td>
    </tbody>
  </table>
  <div x-show="isShown">
    <div>{comment.content}</div>
    <CommentReply postId={postId} parentCommentId={comment.id} />
    <div class="pl-3 mt-3">
      <CommentList
        postId={postId}
        comments={comment.children as CommentWithComments[]}
        depth={depth + 1}
        parentCommentId={comment.id}
        newId={newId}
        hiddenCommentIds={hiddenCommentIds}
      />
    </div>
  </div>
</div>
