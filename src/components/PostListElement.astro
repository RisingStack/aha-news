---
import type { Post, PostVote } from "@prisma/client";
import type { User } from "lucia";
import VoteArrows from "../components/VoteArrows.astro";

interface PostWithUser extends Post {
  user: User;
  postVotes: PostVote[];
  currentUserVote: PostVote | null;
}

interface Props {
  i?: number;
  post: PostWithUser;
  onPostPage?: boolean;
}

const { i, post, onPostPage } = Astro.props;
const { user } = Astro.locals;
const currentUserVote = post.currentUserVote?.vote;
---

<tr
  x-data={`{isShown: true, i: ${i + 1}}`}
  x-show="isShown"
  x-on:decrement.window="i = i - 1"
>
  <td x-show="i" x-html="i + '.'">
    {i + 1}.
  </td>
  <td>
    {
      user && (
        <div
          id={`vote-arrows-${post.id}`}
          class="flex flex-col text-xs leading-none"
        >
          <VoteArrows
            url={`/api/posts/${post.id}/vote/`}
            entityId={post.id}
            currentUserVote={currentUserVote}
            user={user}
          />
        </div>
      )
    }
  </td>
  <td class="pl-1">
    <a href={`/posts/${post.id}`}><div class="size">{post.title}</div></a>
    <div class="text-xs">
      <span id={`post-vote-count-${post.id}`}>{post.voteCount}</span> points by
      <a href="#">{post.user.name}</a> |
      <a href={`/posts/${post.id}`}>
        {post.commentCount > 0 ? `${post.commentCount} comments` : "discuss"}
      </a>
      <a href="#" x-on.prevent:click="isShown = false; $dispatch('decrement')">
        hide
      </a>
    </div>
  </td>
</tr>
